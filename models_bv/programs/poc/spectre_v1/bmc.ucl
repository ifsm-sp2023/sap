module platform {
    next {
        call choose_process();
        case
            (pc == A_ADDR && pid() == VICTIM_PID): {
                call blockA();
            }
            (pc == B_ADDR && pid() == VICTIM_PID): {
                call blockB();
            }
            (pid() == ADVERSARY_PID): {
                call adv_execute();
            }
            default: {
                skip;
            }
        esac
    }
}

module main {

    // invariant test: step == 1bv5 ==> false;

    control {
        // set_solver_option(":mbqi", false);
        set_solver_option(":case_split", 0);
        set_solver_option(":relevancy", 0);
        set_solver_option(":threads", 8);
        set_solver_option(":blast_full", true);

        v = bmc(3);
        check;
        print_results;
        // v.print_cex(
        //     p.pc,
        //     p.regs[r0],
        //     p.regs_taint[r0],
        //     p.regs[r1],
        //     p.regs_taint[r1],
        //     p.regs[r2],
        //     p.regs_taint[r2],
        //     p.regs[r3],
        //     p.regs_taint[r3],
        //     p.regs[r4],
        //     p.regs_taint[r4],
        //     p.cache,
        //     p.excp,
        //     p.cpid,
        //     p.cpid == VICTIM_PID,
        //     p.adv_input,
        //     p.adv_op
        // );
        // v.print_cex(
        //     p1.pc, p2.pc,
        //     p1.regs[r0], p2.regs[r0],
        //     p1.regs[r1], p2.regs[r1],
        //     p1.regs[r2], p2.regs[r2],
        //     p1.regs[r3], p2.regs[r3],
        //     p1.regs[r4], p2.regs[r4],
        //     p1.excp, p2.excp,
        //     p1.observations, p2.observations,
        //     p1.cache, p2.cache,
        //     p1.tlb_valid, p2.tlb_valid,
        //     p1.tlb_valid == p2.tlb_valid,
        //     p1.cache == p2.cache,
        //     p1.adv_input, p2.adv_input,
        //     p1.cpid, p2.cpid,
        //     p1.cpid == VICTIM_PID,
        //     secret_addr
        // );
    }
}