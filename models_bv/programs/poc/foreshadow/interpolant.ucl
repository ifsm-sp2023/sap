module platform {
    next {
        call choose_process();
        case
            (pc == A_ADDR && pid() == VICTIM_PID): {
                call blockA();
            }
            (pid() == ADVERSARY_PID): {
                call adv_execute();
            }
            default: {
                skip;
            }
        esac
    }
}

module platform {

    procedure check_blockA()
        ensures interpolant1();
    {
        call platform_init_assumptions();
        call blockA();
    }

    define interpolant1(): boolean = 
        !regs_taint[zero] &&
        !regs_taint[rsi] &&
        !observations_taint;

    procedure check_adversary_end()
        requires interpolant1();
        ensures interpolant2();
    {
        call adv_execute();
    }

    define interpolant2(): boolean =
        !observations_taint;

    control {
        // set_solver_option(":mbqi", false);
        set_solver_option(":case_split", 0);
        set_solver_option(":relevancy", 0);
        set_solver_option(":threads", 8);
        set_solver_option(":blast_full", true);

        i1 = verify(check_blockA);
        i2 = verify(check_adversary_end);
        check;
        print_results;
    }
}