module common {
    const zero: reg_index_t = 0bv5;
    const r0:   reg_index_t = 1bv5;
    const r1:   reg_index_t = 2bv5;
    const r2:   reg_index_t = 3bv5;
    const r3:   reg_index_t = 4bv5;
    const sp:   reg_index_t = 5bv5;    // stack pointer
    const gp:   reg_index_t = 6bv5;    // global pointer

    const A_ADDR: addr_t = 1000bv64;
    const B_ADDR: addr_t = 2000bv64;
    const C_ADDR: addr_t = 3000bv64;
}

module platform {
    procedure blockA()
    {
        // r3 == C_ADDR
        call jmp(r3);
    }

    procedure blockB()
    {
        // r3 = &array1
        call addi(r3, gp, -100bv64);
        // r3 = array1
        call load(r3, r3, 0bv64);
        // r3 = array1 + x
        call add(r0, r0, r3);
        // r0 = array[x]
        call load(r0, r0, 0bv64);
        // r0 = array[x] * 512
        call muli(r0, r0, 9bv64);
        // r3 = &array2
        call addi(r3, gp, -200bv64);
        // r3 = array2
        call load(r3, r3, 0bv64);
        // r0 = array2 + array[x] << 9
        call add(r0, r0, r3);
        // array2[array1[x] << 9]
        call load(r0, r0, 0bv64);

        // go to the next block
        call write_pc(C_ADDR);
    }
    
    /*  Set the initial PC
     */
    axiom pc_init == A_ADDR;

    /*  Ignore all exceptions.
     */
    axiom get_excp() == none;

    procedure platform_init_assumptions() {
        call setup_bmc_init_assumptions();
    }
}

module main {
    procedure main_init_assumptions() {}
}